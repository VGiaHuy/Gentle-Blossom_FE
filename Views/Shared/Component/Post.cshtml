@using Gentle_Blossom_FE.Data.DTOs.UserDTOs
@model List<PostDTO>

@foreach (var post in Model)
{
    <div class="mb-4 border border-1 border-primary rounded-4 p-3">
        <div class="d-flex align-items-center mb-3">
            <img src="/images/default-avatar.jpg" alt="Avatar" class="rounded-circle me-3" style="width: 50px; height: 50px;">
            <div class="flex-grow-1">
                @if (!string.IsNullOrEmpty(post.AcademicTitle))
                {
                    <strong class="d-block accademictitle" style="color: #198754;">@post.AcademicTitle</strong>
                }
                <strong class="d-block text-primary fw-bold" style="color: #0dcaf0;">@post.PosterName</strong>
                <p class="text-muted mb-0 small">@post.CreatedDate</p>
            </div>
            <div class="dropdown">
                <button class="btn btn-outline-secondary btn-sm rounded-circle" type="button" data-bs-toggle="dropdown" aria-expanded="false">
                    <i class="bi bi-three-dots"></i>
                </button>
                <ul class="dropdown-menu rounded-3">
                    <li><a class="dropdown-item" href="#" onclick="savePost()"><i class="bi bi-bookmark me-2"></i>Lưu bài viết</a></li>
                    <li><a class="dropdown-item" href="#" onclick="muteNotifications()"><i class="bi bi-bell-slash me-2"></i>Tắt thông báo</a></li>
                    <li><a class="dropdown-item" href="#" onclick="reportPost()"><i class="bi bi-flag me-2"></i>Báo cáo bài viết</a></li>
                </ul>
            </div>
        </div>
        <p class="text-muted mb-3">@Html.Raw(post.Content)</p>
        @if (post.MediaList != null && post.MediaList.Any())
        {
            <div class="media-gallery row g-2 mb-3">
                @foreach (var media in post.MediaList)
                {
                    @if (!string.IsNullOrEmpty(media.MediaUrl))
                    {
                        <div class="col-6 col-md-4">
                            @if (string.Equals(media.MediaType, "Image", StringComparison.OrdinalIgnoreCase))
                            {
                                if (Uri.TryCreate(media.MediaUrl, UriKind.Absolute, out var uriResult) &&
                                (uriResult.Scheme == Uri.UriSchemeHttp || uriResult.Scheme == Uri.UriSchemeHttps))
                                {
                                    <img src="/Post/ProxyImage?url=@(Uri.EscapeDataString(media.MediaUrl))"
                                         alt="@media.FileName"
                                         class="img-fluid rounded"
                                         style="max-height: 200px; object-fit: cover;"
                                         loading="lazy"
                                         onerror="this.onerror=null; this.src='/images/fallback-image.jpg';" />
                                }
                                else
                                {
                                    <img src="/images/fallback-image.jpg"
                                         alt="@media.FileName"
                                         class="img-fluid rounded"
                                         style="max-height: 200px; object-fit: cover;"
                                         data-src="invalid-url" />
                                }
                            }
                            else if (string.Equals(media.MediaType, "Video", StringComparison.OrdinalIgnoreCase))
                            {
                                <iframe src="https://drive.google.com/file/d/@(ExtractFileId(media.MediaUrl))/preview?t=@(DateTime.Now.Ticks)"
                                        class="img-fluid rounded"
                                        style="max-height: 200px; width: 100%; border: 1px solid #dee2e6;"
                                        allowfullscreen>
                                </iframe>
                            }
                        </div>
                    }
                }
            </div>
        }
        <div class="d-flex justify-content-between align-items-center mb-3">
            <div class="d-flex gap-2 align-items-center">
                <i class="bi bi-heart-fill text-danger"></i>
                <span class="text-muted small" id="post-like-count-@post.PostId">@post.NumberOfLike lượt thích</span>
            </div>
            <div class="d-flex gap-2 align-items-center">
                <span class="text-muted small comment-count">@post.NumberOfComment bình luận</span>
                <span class="text-muted small share-count">0 lượt chia sẻ</span>
            </div>
        </div>
        <div class="d-flex gap-2 border-top pt-3 mb-3">
            <button class="btn btn-sm rounded-3 flex-fill btn-outline-soft like-button"
                    data-post-id="@post.PostId" data-liked="false"
                    style="--btn-color: #dc3545; --btn-hover: #f8d7da;"
                    onclick="toggleLike(this, 'post', @post.PostId)">
                <i class="bi bi-heart me-1"></i> Thích
            </button>
            <button class="btn btn-sm rounded-3 flex-fill btn-outline-soft comment-button"
                    style="--btn-color: #0dcaf0; --btn-hover: #e0f7fb;"
                    data-post-id="@post.PostId">
                <i class="bi bi-chat-text me-1"></i> Bình luận
            </button>
            <button class="btn btn-sm rounded-3 flex-fill btn-outline-soft"
                    style="--btn-color: #198754; --btn-hover: #d1e7dd;"
                    onclick="sharePost()">
                <i class="bi bi-share me-1"></i> Chia sẻ
            </button>
            <button class="btn btn-sm rounded-3 flex-fill btn-outline-soft"
                    style="--btn-color: #ffc107; --btn-hover: #fff8e3;"
                    onclick="bookmarkPost()">
                <i class="bi bi-bookmark-fill me-1"></i> Yêu thích
            </button>
        </div>
    </div>
}

@await Html.PartialAsync("Component/DetailPostModal", new List<CommentPostDTOs>())

@functions {
    string ExtractFileId(string url)
    {
        var match = System.Text.RegularExpressions.Regex.Match(url, @"id=([\w-]+)");
        return match.Success ? match.Groups[1].Value : url;
    }
}